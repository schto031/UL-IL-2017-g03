package icrash.environment.operations.actAuthenticated.outactAuthenticated.oeSetCoordinatorExpertise {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.concepts.secondarytypes.datatypes
import icrash.environment

	Operation Model {

		operation: icrash.environment.actAuthenticated.outactAuthenticated.oeSetCoordinatorExpertise(AdtExpertise:icrash.concepts.primarytypes.datatypes.etExpertise, AdtAddOrDelete:icrash.concepts.primarytypes.datatypes.dtAddOrDelete, AdtCoordinatorID:icrash.concepts.primarytypes.datatypes.dtCoordinatorID):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
		preP{
			  let TheSystem: icrash.concepts.primarytypes.classes.ctState in
			  let TheActor:icrash.environment.actAuthenticated in
			  
			  self.rnActor.rnSystem = TheSystem
			  and self.rnActor = TheActor
			  /* PreP01 */
			  and TheSystem.vpStarted = true
			  /* PreP02 */
			  and TheActor.rnctAuthenticated.vpIsLogged = true
			  }
		preF{ let TheSystem: icrash.concepts.primarytypes.classes.ctState in
			  let TheActor:icrash.environment.actAuthenticated in
			   
			  self.rnActor.rnSystem = TheSystem
			  and self.rnActor = TheActor
			/* PreF01 */
			  TheSystem.rnctCoordinator->select(id.eq(AdtCoordinatorID))
			  = CollectCoordinator
			  and CollectCoorinator->size().eq(1)}
		postF{
			let TheSystem: icrash.concepts.primarytypes.classes.ctState in
  			let ThectCrisis:icrash.concepts.primarytypes.classes.ctCoordinator in
  			let TheclExpertise:icrash.concepts.primarytypes.classes.clExpertrises in
  			let AptStringMessageForTheActor:ptString in
 			self.rnActor.rnSystem = TheSystem
  			and self.rnActor = TheActor
  			TheSystem.rnctCOOrinator->select(id.eq(AdtCoordinatorID))
			  = CollectCoordinator
  			if(AdtAddOrDelete and CollectCoordinator.rnctExpertises->select(Expertises.eq(AdtExpertises))->isEmpty)
  				then (CollectCrisis.rnclExpertises.init(AdtExpertises))
			else if(AdtAddOrDelete and not CollectCoordinator.rnctExpertises->select(Expertises.eq(AdtExpertises))->isEmpty)
				then(.eq('this crisis instance already is linked to an instance of this crisis can therefore not be created'))
			else if(not AdtAddOrDelete and CollectCoordinator.rnctExpertises->select(Expertises.eq(AdtExpertises))->isEmpty)
				then(.eq('this crisis instance is not linked to an instance of this crisis and can therefore not be deleted'))
			else ( and CollectCoordinator.rnclExpertises->select(Expertises.eq(AdtExpertises))(msrIsKilled))
			endif
			endif
			endif
			}
		postP{true}
		}
	}
}
